/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,28],$V1=[1,30],$V2=[1,31],$V3=[1,32],$V4=[1,33],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,37],$V9=[1,26],$Va=[1,27],$Vb=[1,29],$Vc=[1,16],$Vd=[1,17],$Ve=[1,18],$Vf=[1,19],$Vg=[1,20],$Vh=[1,21],$Vi=[1,22],$Vj=[1,14],$Vk=[1,8],$Vl=[1,9],$Vm=[1,10],$Vn=[1,11],$Vo=[1,12],$Vp=[1,13],$Vq=[1,10,15,16,17,18,19,20,21,22,24,25,32,35,36,37,38,39,40,41,42,44,45,46,53,54,55],$Vr=[1,41],$Vs=[1,43],$Vt=[1,42],$Vu=[1,44],$Vv=[1,45],$Vw=[1,46],$Vx=[1,47],$Vy=[1,48],$Vz=[1,49],$VA=[1,50],$VB=[1,51],$VC=[1,52],$VD=[1,53],$VE=[1,54],$VF=[1,55],$VG=[1,56],$VH=[1,57],$VI=[1,58],$VJ=[1,59],$VK=[1,60],$VL=[7,8,27,33,47,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74],$VM=[2,41],$VN=[1,63],$VO=[7,8,10,15,16,17,18,19,20,21,22,24,25,27,29,32,33,35,36,37,38,39,40,41,42,47,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74],$VP=[2,39],$VQ=[10,15,16,17,18,19,20,21,22,24,25,32,35,36,37,38,39,40,41,42],$VR=[2,19],$VS=[7,8,10,15,16,17,18,19,20,21,22,24,25,27,32,33,35,36,37,38,39,40,41,42,47,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74],$VT=[7,8,27,33,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,74],$VU=[1,117],$VV=[7,8,27,33,53,55,59,74],$VW=[7,8,27,33,53,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,72,74],$VX=[7,8,27,33,74],$VY=[1,128],$VZ=[10,15,16,17,18,19,20,21,22,24,25,32,33,35,36,37,38,39,40,41,42],$V_=[1,132];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"statement":5,"expr":6,"EOF":7,";":8,"number":9,"NUMBER":10,"exprList":11,"expr2":12,"array":13,"colorSpace2":14,"CSPACE_RGB":15,"CSPACE_CMYK":16,"CSPACE_HSL":17,"CSPACE_HSV":18,"CSPACE_HSI":19,"CSPACE_CIELAB":20,"CSPACE_CIELCH":21,"CSPACE_CIEHCL":22,"colorSpace":23,"CSPACE_ARGB":24,"CSPACE_CMY":25,"colorSpaceParamsList1":26,",":27,"colorWithStop":28,":":29,"colorsWithStopsList":30,"colorsWithStops":31,"(":32,")":33,"%":34,"COLOR_NAME":35,"COLOR_HEX":36,"COLOR_RANDOM":37,"COLOR_NUMBER":38,"COLOR_TEMPERATURE":39,"COLOR_WAVELENGTH":40,"BREWER_CONST":41,"VARIABLE":42,"exprWParen":43,"SCALE":44,"SCALE_BEZIER":45,"SCALE_CUBEHELIX":46,"PARAM":47,"=":48,"+=":49,"-=":50,"*=":51,"/=":52,"-":53,"~":54,"+":55,"*":56,"/":57,"^":58,"%%":59,"<<":60,">>":61,"<<<":62,">>>":63,"!*":64,"**":65,"<*":66,"*>":67,"^*":68,"^^":69,"!^":70,"->":71,"|":72,"{":73,"}":74,"$accept":0,"$end":1},
terminals_: {2:"error",7:"EOF",8:";",10:"NUMBER",15:"CSPACE_RGB",16:"CSPACE_CMYK",17:"CSPACE_HSL",18:"CSPACE_HSV",19:"CSPACE_HSI",20:"CSPACE_CIELAB",21:"CSPACE_CIELCH",22:"CSPACE_CIEHCL",24:"CSPACE_ARGB",25:"CSPACE_CMY",27:",",29:":",32:"(",33:")",34:"%",35:"COLOR_NAME",36:"COLOR_HEX",37:"COLOR_RANDOM",38:"COLOR_NUMBER",39:"COLOR_TEMPERATURE",40:"COLOR_WAVELENGTH",41:"BREWER_CONST",42:"VARIABLE",44:"SCALE",45:"SCALE_BEZIER",46:"SCALE_CUBEHELIX",47:"PARAM",48:"=",49:"+=",50:"-=",51:"*=",52:"/=",53:"-",54:"~",55:"+",56:"*",57:"/",58:"^",59:"%%",60:"<<",61:">>",62:"<<<",63:">>>",64:"!*",65:"**",66:"<*",67:"*>",68:"^*",69:"^^",70:"!^",71:"->",72:"|",73:"{",74:"}"},
productions_: [0,[3,1],[4,1],[4,2],[5,2],[5,2],[5,3],[9,1],[11,2],[11,2],[13,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[23,1],[23,1],[23,1],[26,5],[26,7],[26,9],[28,3],[30,1],[30,2],[31,3],[12,1],[12,2],[12,1],[12,1],[12,1],[12,2],[12,2],[12,2],[12,4],[12,1],[12,1],[12,1],[6,1],[6,1],[6,2],[6,2],[6,3],[6,2],[6,3],[6,2],[6,1],[6,2],[6,3],[6,4],[6,4],[6,4],[6,4],[6,4],[6,2],[6,2],[6,2],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,6],[6,6],[6,7],[6,3],[43,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Program($$[$0], this._$); 
break;
case 2:
this.$ = [new yy.Statement($$[$0], this._$)];
break;
case 3:
this.$ = $$[$0-1].concat(new yy.Statement($$[$0], _$[$0]));
break;
case 4: case 5: case 28:
this.$ = $$[$0-1];
break;
case 6:
this.$ = $$[$0-2];
break;
case 7:
this.$ = new yy.NumberLiteralExpr($$[$0], this._$);
break;
case 8:
this.$ = [$$[$0-1], $$[$0]];
break;
case 9:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 10:
this.$ = new yy.ArrayLiteralExpr($$[$0], this._$);
break;
case 11:
this.$ = "rgb";
break;
case 12:
this.$ = "cmyk";
break;
case 13:
this.$ = "hsl";
break;
case 14:
this.$ = "hsv";
break;
case 15:
this.$ = "hsi";
break;
case 16:
this.$ = "lab";
break;
case 17:
this.$ = "lch";
break;
case 18:
this.$ = "hcl";
break;
case 20:
this.$ = "argb";
break;
case 21:
this.$ = "cmy";
break;
case 22:
this.$ = [$$[$0-4], $$[$0-2], $$[$0]];
break;
case 23:
this.$ = [$$[$0-6], $$[$0-4], $$[$0-2], $$[$0]];
break;
case 24:
this.$ = [$$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]];
break;
case 25:
this.$ = [$$[$0-2], $$[$0]];
break;
case 26:
this.$ = [[$$[$0][0]], [$$[$0][1]]];
break;
case 27:
this.$ = [$$[$0-1][0].concat($$[$0][0]), $$[$0-1][1].concat($$[$0][1])];
break;
case 30:
this.$ = new yy.PercentExpr($$[$0-1], this._$);
break;
case 31:
this.$ = new yy.ColorNameLiteralExpr($$[$0], this._$);
break;
case 32:
this.$ = new yy.ColorHexLiteralExpr($$[$0], this._$);
break;
case 33:
this.$ = new yy.RandomColorExpr(this._$);
break;
case 34:
this.$ = new yy.ColorByNumberExpr($$[$0], this._$);
break;
case 35:
this.$ = new yy.ColorByTemperatureExpr($$[$0], this._$);
break;
case 36:
this.$ = new yy.ColorByWavelengthExpr($$[$0], this._$);
break;
case 37:
this.$ = new yy.ColorBySpaceParams($$[$0-3], $$[$0-1], this._$);
break;
case 38:
this.$ = new yy.BrewerConstExpr($$[$0].replace(/^.+\./, ""), this._$);
break;
case 39:
this.$ = new yy.GetVarExpr($$[$0], this._$);
break;
case 43:
this.$ = new yy.ColorBySpaceParams($$[$0-1], $$[$0].value, this._$);
break;
case 44:
this.$ = new yy.ScaleExpr($$[$0][0], $$[$0][1], void 0, this._$);
break;
case 45:
this.$ = new yy.ScaleExpr($$[$0-1][0], $$[$0-1][1], $$[$0], this._$);
break;
case 46:
this.$ = new yy.ScaleExpr($$[$0], void 0, void 0, this._$);
break;
case 47:
this.$ = new yy.ScaleExpr($$[$0-1], void 0, $$[$0], this._$);
break;
case 48:
this.$ = new yy.BezierExpr($$[$0], this._$);
break;
case 49:
this.$ = new yy.CubehelixExpr(this._$);
break;
case 50:
this.$ = new yy.GetParamExpr($$[$0-1], $$[$0].replace(/^@/, ""), this._$);
break;
case 51:
this.$ = new yy.SetParamExpr($$[$0-2], $$[$0-1].replace(/^@/, ""), $$[$0], void 0, this._$);
break;
case 52:
this.$ = new yy.SetParamExpr($$[$0-3], $$[$0-2].replace(/^@/, ""), $$[$0], void 0, this._$);
break;
case 53:
this.$ = new yy.SetParamExpr($$[$0-3], $$[$0-2].replace(/^@/, ""), $$[$0], "+", this._$);
break;
case 54:
this.$ = new yy.SetParamExpr($$[$0-3], $$[$0-2].replace(/^@/, ""), $$[$0], "-", this._$);
break;
case 55:
this.$ = new yy.SetParamExpr($$[$0-3], $$[$0-2].replace(/^@/, ""), $$[$0], "*", this._$);
break;
case 56:
this.$ = new yy.SetParamExpr($$[$0-3], $$[$0-2].replace(/^@/, ""), $$[$0], "/", this._$);
break;
case 57: case 58: case 59:
this.$ = new yy.UnaryExpr($$[$0], $$[$0-1], void 0, this._$);
break;
case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78:
this.$ = new yy.BinaryExpr($$[$0-2], $$[$0], $$[$0-1], void 0, this._$);
break;
case 79:
this.$ = new yy.BinaryExpr($$[$0-5], $$[$0], $$[$0-4], { mode: $$[$0-2] }, this._$);
break;
case 80:
this.$ = new yy.BinaryExpr($$[$0-5], $$[$0], $$[$0-4], { ratio: $$[$0-2] }, this._$);
break;
case 81:
this.$ = new yy.BinaryExpr($$[$0-6], $$[$0], $$[$0-5], { mode: $$[$0-2], ratio: $$[$0-3] }, this._$);
break;
case 82:
this.$ = new yy.SetVarExpr($$[$0-2], $$[$0], this._$);
break;
case 83:
this.$ = new yy.ParenthesesExpr($$[$0-1], this._$);
break;
}
},
table: [{3:1,4:2,5:3,6:4,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{1:[3]},{1:[2,1],5:38,6:4,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},o($Vq,[2,2]),{7:[1,39],8:[1,40],47:$Vr,53:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},o($VL,$VM,{9:15,43:23,14:25,12:61,23:62,10:$V0,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN}),o($VL,[2,42]),{9:15,10:$V0,11:24,12:66,13:64,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,32:[1,65],35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},{9:15,10:$V0,12:68,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,31:67,32:[1,69],35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},{9:15,10:$V0,12:70,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},o($VL,[2,49]),{6:71,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:72,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:73,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},o($VO,$VP,{48:[1,74]}),o($VO,[2,29],{34:[1,75]}),o($VO,[2,31]),o($VO,[2,32]),o($VO,[2,33]),{9:15,10:$V0,12:76,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},{9:15,10:$V0,12:77,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},{9:15,10:$V0,12:78,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},o($VO,[2,38]),o($VO,[2,40]),o($VL,[2,10],{9:15,43:23,14:25,23:62,12:79,10:$V0,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN}),o($VQ,$VR),o($VQ,[2,20]),o($VQ,[2,21]),o([7,8,10,15,16,17,18,19,20,21,22,24,25,27,29,32,33,34,35,36,37,38,39,40,41,42,47,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74],[2,7]),{6:80,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},o($VS,[2,11]),o($VS,[2,12]),o($VS,[2,13]),o($VS,[2,14]),o($VS,[2,15]),o($VS,[2,16]),o($VS,[2,17]),o($VS,[2,18]),o($Vq,[2,3]),o($Vq,[2,4]),o($Vq,[2,5],{7:[1,81]}),o($VL,[2,50],{9:15,43:23,14:25,23:62,12:82,10:$V0,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,48:[1,83],49:[1,84],50:[1,85],51:[1,86],52:[1,87]}),{6:88,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:89,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:90,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:91,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:92,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:93,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:94,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:95,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:96,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:97,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:98,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:99,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:100,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:101,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:102,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:103,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:104,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:105,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:106,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp,73:[1,107]},o($VS,[2,8]),{32:[1,108]},o($VO,$VP),o($VL,[2,43]),{6:110,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,26:109,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{9:15,10:$V0,12:61,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},o($VL,[2,44],{14:111,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8}),o($VL,[2,46],{14:112,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8}),{6:80,9:15,10:$V0,11:24,12:115,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,28:114,30:113,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},o($VL,[2,48]),o($VT,[2,57],{47:$Vr,71:$VJ}),o($VT,[2,58],{47:$Vr,71:$VJ}),o($VL,[2,59]),{6:116,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},o($VO,[2,30]),o($VO,[2,34]),o($VO,[2,35]),o($VO,[2,36]),o($VS,[2,9]),{33:$VU,47:$Vr,53:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},o($Vq,[2,6]),o($VL,[2,51]),{9:15,10:$V0,12:118,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},{9:15,10:$V0,12:119,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},{9:15,10:$V0,12:120,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},{9:15,10:$V0,12:121,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},{9:15,10:$V0,12:122,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},o($VV,[2,60],{47:$Vr,56:$Vu,57:$Vv,58:$Vw,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($VV,[2,61],{47:$Vr,56:$Vu,57:$Vv,58:$Vw,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($VW,[2,62],{47:$Vr,58:$Vw,71:$VJ}),o($VW,[2,63],{47:$Vr,58:$Vw,71:$VJ}),o($VT,[2,64],{47:$Vr,71:$VJ}),o($VX,[2,65],{47:$Vr,53:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($VW,[2,66],{47:$Vr,58:$Vw,71:$VJ}),o($VW,[2,67],{47:$Vr,58:$Vw,71:$VJ}),o($VW,[2,68],{47:$Vr,58:$Vw,71:$VJ}),o($VW,[2,69],{47:$Vr,58:$Vw,71:$VJ}),o($VW,[2,70],{47:$Vr,58:$Vw,71:$VJ}),o($VW,[2,71],{47:$Vr,58:$Vw,71:$VJ}),o($VW,[2,72],{47:$Vr,58:$Vw,71:$VJ}),o($VW,[2,73],{47:$Vr,58:$Vw,71:$VJ}),o($VW,[2,74],{47:$Vr,58:$Vw,71:$VJ}),o($VW,[2,75],{47:$Vr,58:$Vw,71:$VJ}),o($VW,[2,76],{47:$Vr,58:$Vw,71:$VJ}),o([7,8,27,33,47,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,74],[2,77]),o($VW,[2,78],{47:$Vr,58:$Vw,71:$VJ}),{6:124,9:15,10:$V0,11:24,12:125,13:6,14:123,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:126,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,26:109,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{33:[1,127]},{27:$VY,33:$VU,47:$Vr,53:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},o($VL,[2,45]),o($VL,[2,47]),{9:15,10:$V0,12:131,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,28:130,32:$Vb,33:[1,129],35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},o($VZ,[2,26]),o([33,47,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],$VM,{9:15,43:23,14:25,12:61,23:62,10:$V0,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,24:$V9,25:$Va,29:$V_,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN}),o($VX,[2,82],{47:$Vr,53:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}),o($VO,[2,83]),o($VL,[2,52]),o($VL,[2,53]),o($VL,[2,54]),o($VL,[2,55]),o($VL,[2,56]),o($VQ,$VR,{74:[1,133]}),{47:$Vr,53:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,74:[1,134]},o([47,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74],$VM,{9:15,43:23,12:61,23:62,14:135,10:$V0,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN}),{27:$VY,47:$Vr,53:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},o($VO,[2,37]),{6:136,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},o([7,8,15,16,17,18,19,20,21,22,27,33,47,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74],[2,28]),o($VZ,[2,27]),{29:$V_},{9:15,10:$V0,12:137,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:62,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$VN,43:23},{6:138,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:139,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{32:$VR,74:[1,140]},{27:[1,141],47:$Vr,53:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},o($VZ,[2,25]),o($VW,[2,79],{47:$Vr,58:$Vw,71:$VJ}),o($VW,[2,80],{47:$Vr,58:$Vw,71:$VJ}),{6:142,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{6:143,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},o($VW,[2,81],{47:$Vr,58:$Vw,71:$VJ}),{27:[1,144],33:[2,22],47:$Vr,53:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{6:145,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{27:[1,146],33:[2,23],47:$Vr,53:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK},{6:147,9:15,10:$V0,11:24,12:5,13:6,14:25,15:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:$V8,23:7,24:$V9,25:$Va,32:$Vb,35:$Vc,36:$Vd,37:$Ve,38:$Vf,39:$Vg,40:$Vh,41:$Vi,42:$Vj,43:23,44:$Vk,45:$Vl,46:$Vm,53:$Vn,54:$Vo,55:$Vp},{33:[2,24],47:$Vr,53:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK}],
defaultActions: {},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true,"ranges":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */;
break;
case 1:return "NUMBER";
break;
case 2:return "COLOR_HEX";
break;
case 3:return "COLOR_NAME";
break;
case 4:return "BREWER_CONST";
break;
case 5:return "COLOR_RANDOM";
break;
case 6:return "COLOR_NUMBER";
break;
case 7:return "COLOR_TEMPERATURE";
break;
case 8:return "COLOR_WAVELENGTH";
break;
case 9:return "CSPACE_RGB";
break;
case 10:return "CSPACE_ARGB";
break;
case 11:return "CSPACE_CMY";
break;
case 12:return "CSPACE_CMYK";
break;
case 13:return "CSPACE_HSL";
break;
case 14:return "CSPACE_HSV";
break;
case 15:return "CSPACE_HSI";
break;
case 16:return "CSPACE_CIELAB";
break;
case 17:return "CSPACE_CIELCH";
break;
case 18:return "CSPACE_CIEHCL";
break;
case 19:return "SCALE";
break;
case 20:return "SCALE_BEZIER";
break;
case 21:return "SCALE_CUBEHELIX";
break;
case 22:return "PARAM"
break;
case 23:return "VARIABLE"
break;
case 24:return "%%";
break;
case 25:return "%";
break;
case 26:return "~";
break;
case 27:return "+=";
break;
case 28:return "+";
break;
case 29:return "->";
break;
case 30:return "-=";
break;
case 31:return "-";
break;
case 32:return "^^";
break;
case 33:return "^*";
break;
case 34:return "!^";
break;
case 35:return "^";
break;
case 36:return "**";
break;
case 37:return "!*";
break;
case 38:return "<*";
break;
case 39:return "*>";
break;
case 40:return "*=";
break;
case 41:return "*";
break;
case 42:return "/=";
break;
case 43:return "/";
break;
case 44:return "(";
break;
case 45:return ")";
break;
case 46:return "{";
break;
case 47:return "}";
break;
case 48:return "[";
break;
case 49:return "]";
break;
case 50:return ",";
break;
case 51:return "=";
break;
case 52:return "|";
break;
case 53:return "<<<";
break;
case 54:return ">>>";
break;
case 55:return "<<";
break;
case 56:return ">>";
break;
case 57:return ":";
break;
case 58:return ";";
break;
case 59:return "EOF";
break;
case 60:return "INVALID";
break;
case 61:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:((0|[1-9]\d*|)\.\d+|(0|[1-9]\d*)\.\d*|\d+|0o[0-7]+|0x[a-f\d]+|0b[01]+)\b)/i,/^(?:#?([a-f\d]{3}|[a-f\d]{6}|[a-f\d]{8})\b)/i,/^(?:(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)\b)/i,/^(?:(OrRd|PuBu|BuPu|Oranges|BuGn|YlOrBr|YlGn|Reds|RdPu|Greens|YlGnBu|Purples|GnBu|Greys|YlOrRd|PuRd|Blues|PuBuGn|Spectral|RdYlGn|RdBu|PiYG|PRGn|RdYlBu|BrBG|RdGy|PuOr|Set2|Accent|Set1|Set3|Dark2|Paired|Pastel2|Pastel1)\b)/i,/^(?:(random|rand)\b)/i,/^(?:(number|num|n)\b)/i,/^(?:(temperature|temp|t)\b)/i,/^(?:(wavelength|wl)\b)/i,/^(?:rgba?\b)/i,/^(?:argb\b)/i,/^(?:cmya?\b)/i,/^(?:cmyka?\b)/i,/^(?:hsla?\b)/i,/^(?:hs(v|b)a?\b)/i,/^(?:hsia?\b)/i,/^(?:laba?\b)/i,/^(?:lcha?\b)/i,/^(?:hcla?\b)/i,/^(?:scale\b)/i,/^(?:bezier\b)/i,/^(?:cubehelix\b)/i,/^(?:@(\w+\.)*\w+\b)/i,/^(?:\$\w*\b|\$)/i,/^(?:%%)/i,/^(?:%)/i,/^(?:~)/i,/^(?:\+=)/i,/^(?:\+)/i,/^(?:->)/i,/^(?:-=)/i,/^(?:-)/i,/^(?:\^\^)/i,/^(?:\^\*)/i,/^(?:!\^)/i,/^(?:\^)/i,/^(?:\*\*)/i,/^(?:!\*)/i,/^(?:<\*)/i,/^(?:\*>)/i,/^(?:\*=)/i,/^(?:\*)/i,/^(?:\/=)/i,/^(?:\/)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:=)/i,/^(?:\|)/i,/^(?:<<<)/i,/^(?:>>>)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?::)/i,/^(?:;)/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}